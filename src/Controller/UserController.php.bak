<?php

namespace App\Controller;

use App\Entity\User;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Nelmio\ApiDocBundle\Annotation\Model;
use OpenApi\Attributes as OA;

#[Route('/api/v1')]
class UserController extends AbstractController
{
    private UserRepository $userRepository;
    private EntityManagerInterface $entityManager;
    private RequestStack $requestStack;

    public function __construct(UserRepository $userRepository, EntityManagerInterface $entityManager, RequestStack $requestStack)
    {
        $this->userRepository = $userRepository;
        $this->entityManager = $entityManager;
        $this->requestStack = $requestStack;
    }

	#[OA\Post(
    path: '/api/v1/signup',
    summary: 'Rejestracja nowego użytkownika',
    requestBody: new OA\RequestBody(
        required: true,
        content: new OA\JsonContent(
            required: ["email", "password", "name", "surname", "age"],
            type: "object",
            properties: [
                new OA\Property(property: "email", type: "string", format: "email"),
                new OA\Property(property: "password", type: "string"),
                new OA\Property(property: "name", type: "string"),
                new OA\Property(property: "surname", type: "string"),
                new OA\Property(property: "age", type: "integer")
            ]
        )
    ),
    responses: [
        new OA\Response(response: 201, description: "User registered successfully"),
        new OA\Response(response: 400, description: "Missing required fields or email already in use")
    ]
	)]

    #[Route('/signup', methods: ['POST'])]
    public function register(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse
    {
        $data = json_decode($request->getContent(), true);


        if (!isset($data['email'], $data['password'], $data['name'], $data['surname'], $data['age'])) {
            return $this->json(['error' => 'Missing required fields'], 400);
        }


        if ($this->userRepository->findOneBy(['email' => $data['email']])) {
            return $this->json(['error' => 'Email already in use'], 400);
        }

        $user = new User();
        $user->setEmail($data['email'])
            ->setPassword($passwordHasher->hashPassword($user, $data['password']))
            ->setName($data['name'])
            ->setSurname($data['surname'])
            ->setAge((int) $data['age']);

        $this->entityManager->persist($user);
        $this->entityManager->flush();

        return $this->json(['message' => 'User registered successfully']);
    }

#[OA\Post(
    path: '/api/v1/login',
    summary: 'Logowanie użytkownika',
    requestBody: new OA\RequestBody(
        required: true,
        content: new OA\JsonContent(
            required: ["email", "password"],
            type: "object",
            properties: [
                new OA\Property(property: "email", type: "string", format: "email"),
                new OA\Property(property: "password", type: "string")
            ]
        )
    ),
    responses: [
        new OA\Response(response: 200, description: "User logged in"),
        new OA\Response(response: 401, description: "Invalid credentials")
    ]
)]

#[Route('/login', methods: ['POST'])]
public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse
{
    $session = $this->requestStack->getSession();
    $data = json_decode($request->getContent(), true);

    if (!isset($data['email'], $data['password'])) {
        return $this->json(['error' => 'Missing email or password'], 400);
    }

    $email = $data['email'];
    $password = $data['password'];

    $user = $this->userRepository->findOneBy(['email' => $email]);

    if (!$user || !$passwordHasher->isPasswordValid($user, $password)) {
        return $this->json(['error' => 'Invalid credentials'], 401);
    }

    $session->set('user', $user->getId());

    return $this->json([
        'id' => $user->getId(),
        'email' => $user->getEmail(),
        'name' => $user->getName(),
        'surname' => $user->getSurname(),
        'age' => $user->getAge(),
    ], 200);
}

	#[OA\Post(
    path: '/api/v1/logout',
    summary: 'Wylogowanie użytkownika',
    responses: [
        new OA\Response(response: 200, description: "Logged out successfully")
    ]
	)]
 
    #[Route('/logout', methods: ['POST'])]
	public function logout(Request $request): JsonResponse
	{
		$session = $this->requestStack->getSession();

		if (!$session->has('user')) {
			return $this->json(['error' => 'No active session'], 401);
		}

		$session->remove('user');
		$session->invalidate();

		return $this->json(['message' => 'Logged out successfully'], 200);
	}
	
	#[OA\Get(
    path: '/api/v1/test',
    summary: 'Test endpoint',
    responses: [
        new OA\Response(response: 200, description: "OK")
    ]
	)]
	#[Route('/api/v1/test', name: 'api_test', methods: ['GET'])]
	public function test(): JsonResponse
	{
		return $this->json(['message' => 'ok']);
	}

}
